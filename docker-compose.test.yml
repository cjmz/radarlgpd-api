# docker-compose.test.yml - Para testes locais completos com a aplicação
# Uso: docker compose -f docker-compose.test.yml up --build

services:
  postgres:
    image: postgres:16-alpine
    container_name: radarlgpd-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: radarlgpd
      POSTGRES_USER: radarlgpd_user
      POSTGRES_PASSWORD: radarlgpd_dev_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - radarlgpd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U radarlgpd_user -d radarlgpd"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: radarlgpd-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/radarlgpd
      DB_USERNAME: radarlgpd_user
      DB_PASSWORD: radarlgpd_dev_password
      RADARLGPD_API_KEY: test-api-key-docker-compose
      RADARLGPD_RATE_LIMIT: 100
      ALLOWED_ORIGINS: "*"
    networks:
      - radarlgpd-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  radarlgpd-network:
    driver: bridge
